{"componentChunkName":"component---src-templates-blog-template-1-js","path":"/blog/1","result":{"data":{"markdownRemark":{"html":"<h2><div style=\"color: #fa4659\">들어가기전</div></h2>\n<blockquote>\n<p>최근 프론트 프레임워크를 사용하게 되면 보게되는것이 바로 <strong>Component</strong>이다.<br/>\n<strong>Component</strong>란 'UI를 독립적으로 재사용 가능한 단위' 라고 하는데 <br/>\n처음 프레임워크(Vue, React, ...)를 사용하게되면 <br/>\n대부분 클래스 타입의 컴포넌트를 사용하게되는데 깊게 들어가다보면 Performance에 신경을 쓰게된다. <br/>\n(왜냐 SPA쓴다면 역시나 랜더링 포퍼먼스에 신경쓰일수 밖에...) <br/>\n그러다 보면 stateful vs stateless에 도달하게 된다. 이번 기회에 두 컴포넌트 방식에 대해 정리하고자 한다. <br/></p>\n</blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li><code>stateful vs stateless</code></li>\n<li><code>container vs presentation</code></li>\n<li><code>controller vs view</code></li>\n<li><code>data vs display</code></li>\n</ul>\n</blockquote>\n</blockquote>\n<h2><div style=\"color: #fa4659\"> 본론으로</h2>\n<blockquote>\n<p>기본적으로 Component가 5가지를 가지고있다.</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>render</li>\n<li>state</li>\n<li>props</li>\n<li>context</li>\n<li>lifecycle events</li>\n</ul>\n</blockquote>\n</blockquote>\n<blockquote>\n<h3><strong>Stateful Component</strong></h3>\n<blockquote>\n<p><code>render</code>,  <code>state</code><strong>,</strong>  <code>lifecycle events</code>를 사용하게된다.\n<strong>state</strong> 들고 있으며 Lifecycle event(create, mount, update 등)를 컨트롤 할 수 있다.\n보통은 Class타입으로 정의가 되어 자신의  <strong>state</strong>가 변경이 될 경우 re-render이 이루어진다.\n이 값이 child에게 props의 형태로 전달되기도 한다.</p>\n<div style=\"color: orange; font-weight: bold;\"> 사용하는 경우\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<ol>\n<li>페이지가 유저의 반응에 따라 다른 경우 <br/>(유저가 입력을 하여 상태가 변경되어 re-render이 필요한 경우 등)</li>\n<li>랜더링이 state의존적일 경우 <br/> (랜더링 전에 data fetch가 필요한 경우 등)</li>\n<li>Lifecycle에 대한 훅 또는 트리거가 필요한 경우 <br/> (각 이벤트에 save, fetch, record, computed 등을 할 경우 등)</li>\n</ol>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<div style=\"color: orange; font-weight: bold;\"> 적용 </div>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><code>vuejs</code> 의 경우 보편적으로 Single File Components와 Vue.component\n<code>react</code> 의 경우 React.component</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<h3><strong>Stateless Component</strong></h3>\n</blockquote>\n<blockquote>\n<blockquote>\n<p><code>render</code>,  <code>props</code><strong>,</strong>  <code>context</code> ****를 사용하게된다.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>props를 받아 표시하게 된다. event에 대한 처리가 없음으로 포퍼먼스면에서 우수하다.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>(Vue 혹은 React 버전이 올라갈 수록 stateless쪽이 stateful보다 랜더링 속도가 더욱 빨라지는 것 같다.)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<div style=\"color: orange; font-weight: bold;\"> 사용하는 경우\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<ol>\n<li>페이지가 유저의 반응에 따라 변경이 필요 없는 경우</li>\n</ol>\n<blockquote>\n<p>(stateful의 반대로 입력에 따라 re-render이 필요 없는 경우)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>단순히 props를 표시하는 경우</li>\n</ol>\n<blockquote>\n<p>presentation역할만 할 경우</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>state 혹은 내부 변수가 필요 없는 경우</li>\n</ol>\n<blockquote>\n<p>딱히 지속적으로 변수를 연산하고 상태를 봐야할 필요가 없는 경우</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<div style=\"color: orange; font-weight: bold;\"> 적용\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><code>vuejs</code>의 경우에는 여러가지 선언 방법이 있다.(Render functions, X-template 등)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><a href=\"https://vuejsdevelopers.com/2017/03/24/vue-js-component-templates\">7 Ways to Define a Component Template in Vue.js</a> &#x3C;= 참고 사이트</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><code>react</code> 의 경우에는 FC(Functional Component)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<hr>\n<p>여담으로 react에서는 stateless를 나름 권장(?) 해왔었다.</p>\n</blockquote>\n<blockquote>\n<p>그러나 v 16.8 기준으로 hook(useState, useEffect 등)이 등장하여</p>\n</blockquote>\n<blockquote>\n<p>Stateless Component와 Functional Component 개념이 달라졌음)</p>\n</blockquote>\n<h2><div style=\"color: #fa4659\">결론</h2>\n<blockquote>\n<p>랜더링이 state에 대한 의존이 있다면 stateful\n랜더링이 state에 대한 의존이 없다면 stateless</p>\n</blockquote>\n<blockquote>\n<p>이 정도의 개념만 잡고 사용하고있는 프레임워크에 대한 사용법과 철학을 공부하자</p>\n</blockquote>","frontmatter":{"date":"May 04, 2019","slug":"/blog/1","title":"Stateful vs Stateless Component"}}},"pageContext":{"slug":"/blog/1"}},"staticQueryHashes":["63159454"]}